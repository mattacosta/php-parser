{
    "parser": "@typescript-eslint/parser",
    "plugins": [
        "@typescript-eslint"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "rules": {
        // eslint
        "eqeqeq": "warn",
        "no-case-declarations": "off",
        "no-fallthrough": "off",
        "prefer-const": "off",
        // @typescript-eslint
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/consistent-type-assertions": "off",
        "@typescript-eslint/explicit-module-boundary-types": ["warn", {
            "allowArgumentsExplicitlyTypedAsAny": true
        }],
        "@typescript-eslint/member-delimiter-style": "error",
        "@typescript-eslint/naming-convention": ["error", {
            "selector": "enumMember",
            "format": ["PascalCase"]
        }],
        "@typescript-eslint/no-empty-function": ["error", {
            "allow": [
                "arrowFunctions",
                "private-constructors",
                "protected-constructors"
            ]
        }],
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/no-this-alias": "off",
        "@typescript-eslint/no-unused-vars": ["warn", {
            "args": "none"
        }],
        "@typescript-eslint/type-annotation-spacing": "error"
    },
    "overrides": [
        {
            // Exempt severity prefixes.
            "files": [
                "src/diagnostics/ErrorCode.Generated.ts"
            ],
            "rules": {
                "@typescript-eslint/naming-convention": ["error", {
                    // "allow": ["^(?:ERR|WRN|INFO|HINT)_[a-zA-Z0-9]+$"]
                    "selector": "enumMember",
                    "format": ["PascalCase"],
                    "prefix": ["ERR_", "WRN_", "INFO_", "HINT_"],
                    "filter": {
                        "regex": "^Unknown|Void$",
                        "match": false
                    }
                }]
            }
        },
        {
            // Exempt names that would cause syntax errors otherwise.
            "files": [
                "src/parser/Character.ts"
            ],
            "rules": {
                "@typescript-eslint/naming-convention": "off"
            }
        },
        {
            // Exempt version numbers separated by underscores.
            "files": [
                "src/parser/PhpVersion.ts"
            ],
            "rules": {
                "@typescript-eslint/naming-convention": ["error", {
                    "selector": "enumMember",
                    "format": ["PascalCase"],
                    "filter": {
                        "regex": "^PHP\\d_\\d$",
                        "match": false
                    }
                }]
            }
        },
        {
            // Exempt generated imports.
            "files": [
                "src/**/**.Generated.ts"
            ],
            "rules": {
                "@typescript-eslint/no-unused-vars": "off"
            }
        },
        {
            // Exempt variables containing versioned tests.
            "files": [
                "test/src/**/**.ts"
            ],
            "rules": {
                "@typescript-eslint/naming-convention": ["error", {
                    // "allow": ["^[a-zA-Z]+\\d_\\d$"]
                    "selector": "variable",
                    "format": ["camelCase"],
                    "filter": {
                        "regex": "^[a-zA-Z]+\\d_\\d$",
                        "match": false
                    }
                }]
            }
        },
        {
            // Exempt using `require()` on pre-built files.
            // @todo Remove after switching to TS 3.0 project references.
            "files": [
                "tools/Validator/Program.ts"
            ],
            "rules": {
                "@typescript-eslint/no-var-requires": "off"
            }
        }
    ]
}
