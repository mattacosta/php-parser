{
    "parser": "@typescript-eslint/parser",
    "plugins": [
        "@typescript-eslint"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "rules": {
        // eslint
        "no-case-declarations": "off",
        "no-fallthrough": "off",
        "prefer-const": "off",
        // @typescript-eslint
        "@typescript-eslint/consistent-type-assertions": "off",
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/no-empty-function": ["error", {
            "allow": [
                "arrowFunctions",
                "private-constructors",
                "protected-constructors"
            ]
        }],
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/no-this-alias": "off",
        "@typescript-eslint/no-unused-vars": ["warn", {
            "args": "none"
        }]
    },
    "overrides": [
        {
            // Exempt severity prefixes.
            "files": [
                "src/diagnostics/ErrorCode.Generated.ts"
            ],
            "rules": {
                "@typescript-eslint/camelcase": ["error", {
                    "allow": ["^(?:ERR|WRN|INFO|HINT)_[a-zA-Z0-9]+$"]
                }]
            }
        },
        {
            // @todo False positive?
            "files": [
                "src/language/node/TokenNode.ts"
            ],
            "rules": {
                "@typescript-eslint/no-use-before-define": ["error", {
                    "classes": false
                }]
            }
        },
        {
            // Exempt generated imports.
            "files": [
                "src/**/**.Generated.ts"
            ],
            "rules": {
                "@typescript-eslint/no-unused-vars": "off"
            }
        },
        {
            // Exempt variables containing versioned tests.
            "files": [
                "test/src/**/**.ts"
            ],
            "rules": {
                "@typescript-eslint/camelcase": ["error", {
                    "allow": ["^[a-zA-Z]+\\d_\\d$"]
                }]
            }
        }
    ]
}
